default:
  tags:
    - backend
    - kapibara
  image: docker:24.0.5

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' || $CI_COMMIT_BRANCH == 'main'

stages:
  - build-docker
  - tests & linters
  - build-prod-docker

services:
  - docker:24.0.5-dind
  - postgres:15.3

variables:
  POSTGRES_DB: "kapibara-auth"
  POSTGRES_USER: "kapibara-auth"
  POSTGRES_PASSWORD: "kapibara-auth"
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2

Build & Push Docker:
  stage: build-docker
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull "${CI_REGISTRY_IMAGE}:latest" || true
    - docker build --cache-from "${CI_REGISTRY_IMAGE}:latest"
      -t ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}
      -t ${CI_REGISTRY_IMAGE}:${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME-latest}
      --target dev
      .
    - docker push "${CI_REGISTRY_IMAGE}" --all-tags

Run pytest:
  stage: tests & linters
  needs:
    - Build & Push Docker
  script:
    - docker run
      -v ./coverage:/app/coverage
      -e POSTGRES_USER=$POSTGRES_USER
      -e POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      -e POSTGRES_SERVER=$POSTGRES_PORT_5432_TCP_ADDR
      -e POSTGRES_DB=$POSTGRES_DB
      ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}
      pytest --cov --cov-report term --cov-report xml:coverage/coverage.xml --junit-xml=coverage/report.xml
    - ls -la
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/coverage.xml
      junit: coverage/report.xml

Run linters:
  needs:
    - Build & Push Docker
  stage: tests & linters
  script:
    - docker run
      -v .:/app
      ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}
      pre-commit run -a

Build & Push Prod Docker:
  stage: build-prod-docker
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}" || true
    - docker build --cache-from "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}"
      -t ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}
      -t ${CI_REGISTRY_IMAGE}:${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME-latest}
      --target prod
      .
    - docker push "${CI_REGISTRY_IMAGE}" --all-tags
